>circular
?circular
??circular
??rwrappedcauchy
??reduce
??runif
?runif
?drop_units
??drop_units
#' @field foragers a list containing Reference Class objects that inherit from 'Forager' class.
#' @field patches a simple feature data frame with geometries representing patches in the geometry column
#' @field bounds a spatial features collection with one or more polygons defining the region in which any foragers can be created and moved to
#' @exportClass
#' @examples
#' defaultEnvironment <- Environment()
#' newForagers <- list(Forager(), Forager()) #foragers are created by default between -50 and 50 on both the x and y axis
#' newPatches <- lapply(rep(2, times = 20), function(x) st_point(runif(x, min = -50, max = 50))) %>% st_sfc %>% data.frame(geom = ., NAME = as.character(1:length(.))) %>% st_sf() %>% st_buffer(1)
#' newBounds <- st_sfc(st_convex_hull(reduce(newPatches$geometry, c)), crs = st_crs(newPatches))
#' customEnvironment <-  Environment(newForagers, newPatches, newBounds)
Environment <- setRefClass("Environment",
field = list(foragers = "list", patches = "sf", bounds = "sfc_POLYGON"),
method = list(
initialize = function(...,
patches = lapply(rep(2, times = 10), function(x) st_point(runif(x, min = -15, max = 15))) %>% st_sfc %>% data.frame(geom = ., NAME = as.character(1:length(.))) %>% st_sf() %>% st_buffer(1) %>% st_set_crs(32610),
bounds = st_sfc(st_buffer(st_convex_hull(reduce(patches$geometry, c)),1), crs = st_crs(patches)), #default bounds created as convex hull around patches with a buffer of one
foragers = createForagers(3, bounds = bounds, speed = 2, quiet = TRUE) #default creation of forager within bounds
){  "Set default values for variables that are not entered manually"
callSuper(..., foragers = foragers, patches = patches, bounds = bounds)
},
progress = function(){ "moves the entire environment forward one timestep by moving all foragers once and processing impact of foraging on patches"
for (forager in foragers[sample(length(foragers))]) {#operates on each forager in random order
if (! forager$targeting) forager$setTarget(patches) #If the forager does not currently have a target, look for one
forager$move(bounds = bounds)
}
},
plotPatches = function(){ "displays the current patch geometries"
return(ggplot(data = patches) + geom_sf(fill = "green", axes = TRUE) + theme_classic()) #plots all geometries in patches field
},
plotCurrent = function(){ "displays the current location of all foragers and patch geometries"
fLocations <- st_sf(geom = reduce(lapply(foragers, function(X) X$location),c), TYPE = as.character(sapply(foragers, class)), SPEED = sapply(foragers, function(X) X$speed)) #gets simple feature geometry column for each forager location in a list, then combines all into one simple feature geometry column
cPlot <- ggplot() + geom_sf(data = fLocations, aes(color = TYPE), shape = 13, size = 3) + geom_sf(data = patches$geometry, fill = "green") + geom_sf(data = bounds, linetype = "longdash", fill = NA) + theme_classic()
return(cPlot)
},
plotPaths = function(){ "displays the current location and path of all foragers as well as patch geometries"
cPlot <- plotCurrent()
paths <- reduce(lapply(foragers, function(X) st_cast(X$path, "LINESTRING")), c)
pathsPlot <- cPlot + geom_sf(data = paths, color = 1:length(paths))
return(pathsPlot)
})
)
library(sf)
#' @field foragers a list containing Reference Class objects that inherit from 'Forager' class.
#' @field patches a simple feature data frame with geometries representing patches in the geometry column
#' @field bounds a spatial features collection with one or more polygons defining the region in which any foragers can be created and moved to
#' @exportClass
#' @examples
#' defaultEnvironment <- Environment()
#' newForagers <- list(Forager(), Forager()) #foragers are created by default between -50 and 50 on both the x and y axis
#' newPatches <- lapply(rep(2, times = 20), function(x) st_point(runif(x, min = -50, max = 50))) %>% st_sfc %>% data.frame(geom = ., NAME = as.character(1:length(.))) %>% st_sf() %>% st_buffer(1)
#' newBounds <- st_sfc(st_convex_hull(reduce(newPatches$geometry, c)), crs = st_crs(newPatches))
#' customEnvironment <-  Environment(newForagers, newPatches, newBounds)
Environment <- setRefClass("Environment",
field = list(foragers = "list", patches = "sf", bounds = "sfc_POLYGON"),
method = list(
initialize = function(...,
patches = lapply(rep(2, times = 10), function(x) st_point(runif(x, min = -15, max = 15))) %>% st_sfc %>% data.frame(geom = ., NAME = as.character(1:length(.))) %>% st_sf() %>% st_buffer(1) %>% st_set_crs(32610),
bounds = st_sfc(st_buffer(st_convex_hull(reduce(patches$geometry, c)),1), crs = st_crs(patches)), #default bounds created as convex hull around patches with a buffer of one
foragers = createForagers(3, bounds = bounds, speed = 2, quiet = TRUE) #default creation of forager within bounds
){  "Set default values for variables that are not entered manually"
callSuper(..., foragers = foragers, patches = patches, bounds = bounds)
},
progress = function(){ "moves the entire environment forward one timestep by moving all foragers once and processing impact of foraging on patches"
for (forager in foragers[sample(length(foragers))]) {#operates on each forager in random order
if (! forager$targeting) forager$setTarget(patches) #If the forager does not currently have a target, look for one
forager$move(bounds = bounds)
}
},
plotPatches = function(){ "displays the current patch geometries"
return(ggplot(data = patches) + geom_sf(fill = "green", axes = TRUE) + theme_classic()) #plots all geometries in patches field
},
plotCurrent = function(){ "displays the current location of all foragers and patch geometries"
fLocations <- st_sf(geom = reduce(lapply(foragers, function(X) X$location),c), TYPE = as.character(sapply(foragers, class)), SPEED = sapply(foragers, function(X) X$speed)) #gets simple feature geometry column for each forager location in a list, then combines all into one simple feature geometry column
cPlot <- ggplot() + geom_sf(data = fLocations, aes(color = TYPE), shape = 13, size = 3) + geom_sf(data = patches$geometry, fill = "green") + geom_sf(data = bounds, linetype = "longdash", fill = NA) + theme_classic()
return(cPlot)
},
plotPaths = function(){ "displays the current location and path of all foragers as well as patch geometries"
cPlot <- plotCurrent()
paths <- reduce(lapply(foragers, function(X) st_cast(X$path, "LINESTRING")), c)
pathsPlot <- cPlot + geom_sf(data = paths, color = 1:length(paths))
return(pathsPlot)
})
)
library(ForageR)
