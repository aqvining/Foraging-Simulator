example_matrix1 <- matrix(data = sequence_vector, nrow = 3, ncol =3)
example_matrix1
example_matrix2 <- matrix(sequence_vector, nrow = 3, byrow = TRUE)
example_matrix2
#under the hood: matrices are vectors with 2 dimensional meta-data
str(example_matrix1)
length(example_matrix1)
class(example_matrix1)
example_matrix1[4]
example_matrix2[4] #notice that even when filling by row, subsetting the matrix like a one dimensional vector works column-wise.
example_matrix2[2:7] #indexing a matrix like a vector coerces the result into a vector
#typically, we subset matrices by row and column
example_matrix1[1,2]
example_matrix2[1,2]
example_matrix1[1,]
example_matrix1[c(1,3), 2:3]
#but we also have a few new tools
nrow(example_matrix1)
ncol(example_matrix1)
#Challenge: What type of object is this? What values will it have?
matrix_challenge <- matrix(data = sequence_vector x c(sequence_vector >= 5), nrow = 3)[2,]
knitr::opts_chunk$set(echo = TRUE)
a <- TRUE #note the <-, which assigns the value (TRUE) to the variable (a). Use alt- or cmd- as a shortcut
class(a)
c <- 1
class(c) #note that this is a numeric, not an integer. R defaults to numeric
b <- as.integer(c) # we can coerce a value of one type to another with the as function
class(b)
b == c #logical operators compare two values and return a logical value. Values of different types are not equal
a + c #but when R expects one value type and gets another, it will automatically try to "coerce up"
#c + "1" #Will not automatically "coerce down"
b + as.numeric("1") #but we can tell R to coerce down if it is possible
as.integer(2.2) #be careful coercing down, as you can lose information without realizing it
weight_g <- c(50, 60, 65, 82)
?c
weight_g
animals <- c("coati", "kinkajou", "capuchin") #atomic vectors can have characters
animals
empty <- vector(length = 5)
empty
length(weight_g)
length(animals)
class(weight_g)
class(animals)
str(weight_g)
str(animals)
#What will happen in each of these examples?
num_char <- c(1,2,3,"a")
num_logical <- c(1,2,3,TRUE)
char_logical <- c("a", "b", "c", TRUE)
tricky <- c(1,2,3,"4")
#subsetting atomic vectors
animals[2] #we can provide indices inside square brackets to subset
animals[c(2,3)] #if providing multiple indices, they need to be contained in an atomic vector
animals[1:3] #we can use the colon to generate an atomic vector with an integer sequence
animals[3:1] #indices can be used to reorder a vector
animals[c(2,2,2,2,3)] #and an index can be repeated multiple times
animals[-2] #you can also remove indices
weight_g[c(TRUE, FALSE, FALSE, TRUE)] #Also possible to index using a logical vector
weight_g > 50
weight_g[weight_g >50]
weight_g[weight_g > 50 & weight_g < 80]
weight_g[weight_g <= 50 | weight_g > 80]
#check whether each element of one vector occurs in another
animals2 <- c("kinkajou", "kinkajou", "coati", "meerkat", "meerkat", "capuchin", "meerkat")
animals2 %in% c("kinkajou", "coati")
animals2[animals2 %in% c("kinkajou", "coati")]
sequence_vector <- 1:9
example_matrix1 <- matrix(data = sequence_vector, nrow = 3, ncol =3)
example_matrix1
example_matrix2 <- matrix(sequence_vector, nrow = 3, byrow = TRUE)
example_matrix2
#under the hood: matrices are vectors with 2 dimensional meta-data
str(example_matrix1)
length(example_matrix1)
class(example_matrix1)
example_matrix1[4]
example_matrix2[4] #notice that even when filling by row, subsetting the matrix like a one dimensional vector works column-wise.
example_matrix2[2:7] #indexing a matrix like a vector coerces the result into a vector
#typically, we subset matrices by row and column
example_matrix1[1,2]
example_matrix2[1,2]
example_matrix1[1,]
example_matrix1[c(1,3), 2:3]
#but we also have a few new tools
nrow(example_matrix1)
ncol(example_matrix1)
#Challenge: What type of object is this? What values will it have?
matrix_challenge <- matrix(data = sequence_vector * (sequence_vector >= 5), nrow = 3)[2,]
knitr::opts_chunk$set(echo = TRUE)
a <- TRUE #note the <-, which assigns the value (TRUE) to the variable (a). Use alt- or cmd- as a shortcut
class(a)
c <- 1
class(c) #note that this is a numeric, not an integer. R defaults to numeric
b <- as.integer(c) # we can coerce a value of one type to another with the as function
class(b)
b == c #logical operators compare two values and return a logical value. Values of different types are not equal
a + c #but when R expects one value type and gets another, it will automatically try to "coerce up"
#c + "1" #Will not automatically "coerce down"
b + as.numeric("1") #but we can tell R to coerce down if it is possible
as.integer(2.2) #be careful coercing down, as you can lose information without realizing it
weight_g <- c(50, 60, 65, 82)
?c
weight_g
animals1 <- c("coati", "kinkajou", "capuchin") #atomic vectors can have characters
animals1
empty <- vector(length = 5)
empty
length(weight_g)
length(animals)
class(weight_g)
class(animals)
str(weight_g)
str(animals)
#What will happen in each of these examples?
num_char <- c(1,2,3,"a")
num_logical <- c(1,2,3,TRUE)
char_logical <- c("a", "b", "c", TRUE)
tricky <- c(1,2,3,"4")
#subsetting atomic vectors
animals1[2] #we can provide indices inside square brackets to subset
animals1[c(2,3)] #if providing multiple indices, they need to be contained in an atomic vector
animals1[1:3] #we can use the colon to generate an atomic vector with an integer sequence
animals1[3:1] #indices can be used to reorder a vector
animals1[c(2,2,2,2,3)] #and an index can be repeated multiple times
animals1[-2] #you can also remove indices
weight_g[c(TRUE, FALSE, FALSE, TRUE)] #Also possible to index using a logical vector
weight_g > 50
weight_g[weight_g >50]
weight_g[weight_g > 50 & weight_g < 80]
weight_g[weight_g <= 50 | weight_g > 80]
#check whether each element of one vector occurs in another
animals2 <- c("kinkajou", "kinkajou", "coati", "meerkat", "meerkat", "capuchin", "meerkat")
animals2 %in% c("kinkajou", "coati")
animals2[animals2 %in% c("kinkajou", "coati")]
sequence_vector <- 1:9
example_matrix1 <- matrix(data = sequence_vector, nrow = 3, ncol =3)
example_matrix1
example_matrix2 <- matrix(sequence_vector, nrow = 3, byrow = TRUE)
example_matrix2
#under the hood: matrices are vectors with 2 dimensional meta-data
str(example_matrix1)
length(example_matrix1)
class(example_matrix1)
example_matrix1[4]
example_matrix2[4] #notice that even when filling by row, subsetting the matrix like a one dimensional vector works column-wise.
example_matrix2[2:7] #indexing a matrix like a vector coerces the result into a vector
#typically, we subset matrices by row and column
example_matrix1[1,2]
example_matrix2[1,2]
example_matrix1[1,]
example_matrix1[c(1,3), 2:3]
#but we also have a few new tools
nrow(example_matrix1)
ncol(example_matrix1)
#Challenge: What type of object is this? What values will it have?
matrix_challenge <- matrix(data = sequence_vector * (sequence_vector >= 5), nrow = 3)[2,]
#like matrices, lists add a dimension to vectors - a recursive dimension
animals_all <- list(animals1, animals2)
class(animals_all)
animals_all
animals_all_subset <- animalsAll[1] #we can subset a list like a vector
#like matrices, lists add a dimension to vectors - a recursive dimension
animals_all <- list(animals1, animals2)
class(animals_all)
animals_all
animals_all_subset <- animalsAll[1] #we can subset a list like a vector
#like matrices, lists add a dimension to vectors - a recursive dimension
animals_all <- list(animals1, animals2)
class(animals_all)
animals_all
animals_all_subset <- animals_all[1] #we can subset a list like a vector
class(animals_all_subset)
str(animals_all_subset)
str(animals_all[[1]]) #to retrieve the object is INSIDE a list element, we use double brackets
animals_all <- c(animals_alls, weights_g, vector(mode = "list", length = 7))
#like matrices, lists add a dimension to vectors - a recursive dimension
animals_all <- list(animals1, animals2)
class(animals_all)
animals_all
animals_all_subset <- animals_all[1] #we can subset a list like a vector
class(animals_all_subset)
str(animals_all_subset)
str(animals_all[[1]]) #to retrieve the object is INSIDE a list element, we use double brackets
animals_all <- c(animals_all, weights_g, vector(mode = "list", length = 7))
knitr::opts_chunk$set(echo = TRUE)
a <- TRUE #note the <-, which assigns the value (TRUE) to the variable (a). Use alt- or cmd- as a shortcut
class(a)
c <- 1
class(c) #note that this is a numeric, not an integer. R defaults to numeric
b <- as.integer(c) # we can coerce a value of one type to another with the as function
class(b)
b == c #logical operators compare two values and return a logical value. Values of different types are not equal
a + c #but when R expects one value type and gets another, it will automatically try to "coerce up"
#c + "1" #Will not automatically "coerce down"
b + as.numeric("1") #but we can tell R to coerce down if it is possible
as.integer(2.2) #be careful coercing down, as you can lose information without realizing it
weight_g <- c(50, 60, 65, 82)
?c
weight_g
animals1 <- c("coati", "kinkajou", "capuchin") #atomic vectors can have characters
animals1
empty <- vector(length = 5)
empty
length(weight_g)
length(animals)
class(weight_g)
class(animals)
str(weight_g)
str(animals)
#What will happen in each of these examples?
num_char <- c(1,2,3,"a")
num_logical <- c(1,2,3,TRUE)
char_logical <- c("a", "b", "c", TRUE)
tricky <- c(1,2,3,"4")
#subsetting atomic vectors
animals1[2] #we can provide indices inside square brackets to subset
animals1[c(2,3)] #if providing multiple indices, they need to be contained in an atomic vector
animals1[1:3] #we can use the colon to generate an atomic vector with an integer sequence
animals1[3:1] #indices can be used to reorder a vector
animals1[c(2,2,2,2,3)] #and an index can be repeated multiple times
animals1[-2] #you can also remove indices
weight_g[c(TRUE, FALSE, FALSE, TRUE)] #Also possible to index using a logical vector
weight_g > 50
weight_g[weight_g >50]
weight_g[weight_g > 50 & weight_g < 80]
weight_g[weight_g <= 50 | weight_g > 80]
#check whether each element of one vector occurs in another
animals2 <- c("kinkajou", "kinkajou", "coati", "meerkat", "meerkat", "capuchin", "meerkat")
animals2 %in% c("kinkajou", "coati")
animals2[animals2 %in% c("kinkajou", "coati")]
sequence_vector <- 1:9
example_matrix1 <- matrix(data = sequence_vector, nrow = 3, ncol =3)
example_matrix1
example_matrix2 <- matrix(sequence_vector, nrow = 3, byrow = TRUE)
example_matrix2
#under the hood: matrices are vectors with 2 dimensional meta-data
str(example_matrix1)
length(example_matrix1)
class(example_matrix1)
example_matrix1[4]
example_matrix2[4] #notice that even when filling by row, subsetting the matrix like a one dimensional vector works column-wise.
example_matrix2[2:7] #indexing a matrix like a vector coerces the result into a vector
#typically, we subset matrices by row and column
example_matrix1[1,2]
example_matrix2[1,2]
example_matrix1[1,]
example_matrix1[c(1,3), 2:3]
#but we also have a few new tools
nrow(example_matrix1)
ncol(example_matrix1)
#Challenge: What type of object is this? What values will it have?
matrix_challenge <- matrix(data = sequence_vector * (sequence_vector >= 5), nrow = 3)[2,]
#like matrices, lists add a dimension to vectors - a recursive dimension
animals_all <- list(animals1, animals2)
class(animals_all)
animals_all
animals_all_subset <- animals_all[1] #we can subset a list like a vector
class(animals_all_subset)
str(animals_all_subset)
str(animals_all[[1]]) #to retrieve the object is INSIDE a list element, we use double brackets
animals_all <- c(animals_all, weight_g, vector(mode = "list", length = 7))
str(animals_all)
knitr::opts_chunk$set(echo = TRUE)
a <- TRUE #note the <-, which assigns the value (TRUE) to the variable (a). Use alt- or cmd- as a shortcut
class(a)
c <- 1
class(c) #note that this is a numeric, not an integer. R defaults to numeric
b <- as.integer(c) # we can coerce a value of one type to another with the as function
class(b)
b == c #logical operators compare two values and return a logical value. Values of different types are not equal
a + c #but when R expects one value type and gets another, it will automatically try to "coerce up"
#c + "1" #Will not automatically "coerce down"
b + as.numeric("1") #but we can tell R to coerce down if it is possible
as.integer(2.2) #be careful coercing down, as you can lose information without realizing it
weight_g <- c(50, 60, 65, 82)
?c
weight_g
animals1 <- c("coati", "kinkajou", "capuchin") #atomic vectors can have characters
animals1
empty <- vector(length = 5)
empty
length(weight_g)
length(animals)
class(weight_g)
class(animals)
str(weight_g)
str(animals)
#What will happen in each of these examples?
num_char <- c(1,2,3,"a")
num_logical <- c(1,2,3,TRUE)
char_logical <- c("a", "b", "c", TRUE)
tricky <- c(1,2,3,"4")
#subsetting atomic vectors
animals1[2] #we can provide indices inside square brackets to subset
animals1[c(2,3)] #if providing multiple indices, they need to be contained in an atomic vector
animals1[1:3] #we can use the colon to generate an atomic vector with an integer sequence
animals1[3:1] #indices can be used to reorder a vector
animals1[c(2,2,2,2,3)] #and an index can be repeated multiple times
animals1[-2] #you can also remove indices
weight_g[c(TRUE, FALSE, FALSE, TRUE)] #Also possible to index using a logical vector
weight_g > 50
weight_g[weight_g >50]
weight_g[weight_g > 50 & weight_g < 80]
weight_g[weight_g <= 50 | weight_g > 80]
#check whether each element of one vector occurs in another
animals2 <- c("kinkajou", "kinkajou", "coati", "meerkat", "meerkat", "capuchin", "meerkat")
animals2 %in% c("kinkajou", "coati")
animals2[animals2 %in% c("kinkajou", "coati")]
sequence_vector <- 1:9
example_matrix1 <- matrix(data = sequence_vector, nrow = 3, ncol =3)
example_matrix1
example_matrix2 <- matrix(sequence_vector, nrow = 3, byrow = TRUE)
example_matrix2
#under the hood: matrices are vectors with 2 dimensional meta-data
str(example_matrix1)
length(example_matrix1)
class(example_matrix1)
example_matrix1[4]
example_matrix2[4] #notice that even when filling by row, subsetting the matrix like a one dimensional vector works column-wise.
example_matrix2[2:7] #indexing a matrix like a vector coerces the result into a vector
#typically, we subset matrices by row and column
example_matrix1[1,2]
example_matrix2[1,2]
example_matrix1[1,]
example_matrix1[c(1,3), 2:3]
#but we also have a few new tools
nrow(example_matrix1)
ncol(example_matrix1)
#Challenge: What type of object is this? What values will it have?
matrix_challenge <- matrix(data = sequence_vector * (sequence_vector >= 5), nrow = 3)[2,]
#like matrices, lists add a dimension to vectors - a recursive dimension
animals_all <- list(animals1, animals2)
class(animals_all)
animals_all
animals_all_subset <- animals_all[1] #we can subset a list like a vector
class(animals_all_subset)
str(animals_all_subset)
str(animals_all[[1]]) #to retrieve the object is INSIDE a list element, we use double brackets
animals_all_combined <- c(animals_all, weight_g, vector(mode = "list", length = 7))
str(animals_all_combined)
animals_all_appended <- append(animals_all, weight_g, vector("list", 7))
#like matrices, lists add a dimension to vectors - a recursive dimension
animals_all <- list(animals1, animals2)
class(animals_all)
animals_all
animals_all_subset <- animals_all[1] #we can subset a list like a vector
class(animals_all_subset)
str(animals_all_subset)
str(animals_all[[1]]) #to retrieve the object is INSIDE a list element, we use double brackets
animals_all_combined <- c(animals_all, weight_g, vector(mode = "list", length = 7))
str(animals_all_combined)
animals_all_appended <- append(animals_all, weight_g)
str(animals_all_combined)
#like matrices, lists add a dimension to vectors - a recursive dimension
animals_all <- list(animals1, animals2)
class(animals_all)
animals_all
animals_all_subset <- animals_all[1] #we can subset a list like a vector
class(animals_all_subset)
str(animals_all_subset)
str(animals_all[[1]]) #to retrieve the object is INSIDE a list element, we use double brackets
animals_all_combined <- c(animals_all, weight_g, vector(mode = "list", length = 7))
str(animals_all_combined)
animals_all_appended <- append(animals_all, weight_g)
str(animals_all_appended)
#like matrices, lists add a dimension to vectors - a recursive dimension
animals_all <- list(animals1, animals2)
class(animals_all)
animals_all
animals_all_subset <- animals_all[1] #we can subset a list like a vector
class(animals_all_subset)
str(animals_all_subset)
str(animals_all[[1]]) #to retrieve the object is INSIDE a list element, we use double brackets
animals_all_combined <- c(animals_all, weight_g, vector(mode = "list", length = 7))
str(animals_all_combined)
animals_all_combined <- c(animals_all, list(weight_g, list(rep(NA, times = 7))))
str(animals_all_appended)
#like matrices, lists add a dimension to vectors - a recursive dimension
animals_all <- list(animals1, animals2)
class(animals_all)
animals_all
animals_all_subset <- animals_all[1] #we can subset a list like a vector
class(animals_all_subset)
str(animals_all_subset)
str(animals_all[[1]]) #to retrieve the object is INSIDE a list element, we use double brackets
animals_all_combined <- c(animals_all, weight_g, vector(mode = "list", length = 7))
str(animals_all_combined)
animals_all_combined <- c(animals_all, list(weight_g, list(rep(NA, times = 7))))
str(animals_all_combined)
#like matrices, lists add a dimension to vectors - a recursive dimension
animals_all <- list(animals1, animals2)
class(animals_all)
animals_all
animals_all_subset <- animals_all[1] #we can subset a list like a vector
class(animals_all_subset)
str(animals_all_subset)
str(animals_all[[1]]) #to retrieve the object is INSIDE a list element, we use double brackets
animals_all_combined <- c(animals_all, weight_g, vector(mode = "list", length = 7))
str(animals_all_combined)
animals_all_combined <- c(animals_all, list(weight_g, list(rep(NA, times = 7))))
str(animals_all_combined)
#Challenge: What is the structure and value of the list_challenge variables?
list_challenge1 <- animals_all_combined[1][1]
list_challenge2 <- animals_all_combined[[c(1,2)]]
list_challenge2
list
?data.frame
data.frame(NA, nrow = 4, ncol = 4)
data.frame(matrix(nrow = 5, ncol = 4))
example_data_frame <- data.frame(Species = c("kinkajou", "kinkajou", "coati", "capuchin"),
ID = c("Tony_Stark", "Mario", "Nelson", "DaVinci"),
Weight = c(3.8, 3.9, 6.9, 8.2),
Home_Range_Size = NA)
empty_data_frame <- data.frame(matrix(nrow = 5, ncol = 5))
str(example_data_frame)
length(example_data_frame)
attr(example_data_frame)
example_data_frame <- data.frame(Species = c("kinkajou", "kinkajou", "coati", "capuchin"),
ID = c("Tony_Stark", "Mario", "Nelson", "DaVinci"),
Weight = c(3.8, 3.9, 6.9, 8.2),
Home_Range_Size = NA)
empty_data_frame <- data.frame(matrix(nrow = 5, ncol = 5))
str(example_data_frame)
length(example_data_frame)
attribute(example_data_frame)
example_data_frame <- data.frame(Species = c("kinkajou", "kinkajou", "coati", "capuchin"),
ID = c("Tony_Stark", "Mario", "Nelson", "DaVinci"),
Weight = c(3.8, 3.9, 6.9, 8.2),
Home_Range_Size = NA)
empty_data_frame <- data.frame(matrix(nrow = 5, ncol = 5))
str(example_data_frame)
length(example_data_frame)
attributes(example_data_frame)
methods(example_data_frame)
example_data_frame <- data.frame(Species = c("kinkajou", "kinkajou", "coati", "capuchin"),
ID = c("Tony_Stark", "Mario", "Nelson", "DaVinci"),
Weight = c(3.8, 3.9, 6.9, 8.2),
Home_Range_Size = NA)
empty_data_frame <- data.frame(matrix(nrow = 5, ncol = 5))
str(example_data_frame)
length(example_data_frame)
attributes(example_data_frame)
methods(example_data_frame)
example_data_frame <- data.frame(Species = c("kinkajou", "kinkajou", "coati", "capuchin"),
ID = c("Tony_Stark", "Mario", "Nelson", "DaVinci"),
Weight = c(3.8, 3.9, 6.9, 8.2),
Home_Range_Size = NA)
empty_data_frame <- data.frame(matrix(nrow = 5, ncol = 5))
str(example_data_frame)
length(example_data_frame)
attributes(example_data_frame)
methods(data.frame())
?methods
example_data_frame <- data.frame(Species = c("kinkajou", "kinkajou", "coati", "capuchin"),
ID = c("Tony_Stark", "Mario", "Nelson", "DaVinci"),
Weight = c(3.8, 3.9, 6.9, 8.2),
Home_Range_Size = NA)
empty_data_frame <- data.frame(matrix(nrow = 5, ncol = 5))
str(example_data_frame)
length(example_data_frame)
attributes(example_data_frame)
methods("data.frame")
example_data_frame <- data.frame(Species = c("kinkajou", "kinkajou", "coati", "capuchin"),
ID = c("Tony_Stark", "Mario", "Nelson", "DaVinci"),
Weight = c(3.8, 3.9, 6.9, 8.2),
Home_Range_Size = NA)
empty_data_frame <- data.frame(matrix(nrow = 5, ncol = 5))
str(example_data_frame)
length(example_data_frame)
attributes(example_data_frame)
example_data_frame[[1]]
example_data_frame[2,1]
example_data_frame[3:4,1:2]
example_data_frame <- data.frame(Species = c("kinkajou", "kinkajou", "coati", "capuchin"),
ID = c("Tony_Stark", "Mario", "Nelson", "DaVinci"),
Weight = c(3.8, 3.9, 6.9, 8.2),
Home_Range_Size = NA)
empty_data_frame <- data.frame(matrix(nrow = 5, ncol = 5))
str(example_data_frame)
length(example_data_frame)
attributes(example_data_frame)
example_data_frame[2,1]
example_data_frame[3:4,1:2]
example_data_frame[[1]]
example_data_frame$Species
levels(example_data_frame$Species)
as.character(example_data_frame$Species)
example_data_frame <- data.frame(Species = c("kinkajou", "kinkajou", "coati", "capuchin"),
ID = c("Tony_Stark", "Mario", "Nelson", "DaVinci"),
Weight = c(3.8, 3.9, 6.9, 8.2),
Home_Range_Size = NA)
empty_data_frame <- data.frame(matrix(nrow = 5, ncol = 5))
str(example_data_frame)
length(example_data_frame)
attributes(example_data_frame)
example_data_frame[2,1]
example_data_frame[3:4,1:2]
example_data_frame[[1]]
example_data_frame$Species
levels(example_data_frame$Species)
as.character(example_data_frame$Species)
as.numeric(example_data_frame$Species)
install.packages("https://github.com/aqvining/Foraging-Simulator")
library(ForageR)
selector
build()
library(devtools)
build()
setwd("~/Foraging Simulator")
document()
build()
