geom_sf(data = Molly_POIs[[1]]) +
geom_sf_text(data = Molly_POIs[[1]], aes(label = Cluster)) +
geom_sf(data = filter(Molly_clustered_sf, day == Day), color = "black", size = 2) +
geom_sf(data = filter(Molly_segments, day == Day), aes(color = factor(values)), size = 1) +
theme_classic() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, size = 36)) +
labs(title = paste("Day", Day, sep = " "))
print(dayplot)
}
pdf("../DOCS/POI Maps Molly.pdf", width = 11, height = 8)
for(Day in unique(Molly_segments$day)){
dayplot <- ggplot() +
geom_sf(data = Molly_POIs) +
geom_sf_text(data = Molly_POIs, aes(label = Cluster)) +
geom_sf(data = filter(Molly_clustered_sf, day == Day), color = "black", size = 2) +
geom_sf(data = filter(Molly_segments, day == Day), aes(color = factor(values)), size = 1) +
theme_classic() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, size = 36)) +
labs(title = paste("Day", Day, sep = " "))
print(dayplot)
}
dev.off()
FFT_segments_05_50 <- vector("list", length = length(clustered_sfs_05_50))
for (i in seq_along(clustered_sfs_05_50)){
FFT_segments_05_50[[i]] <- clustered_sfs_05_50[[i]] %>%
group_by(day) %>%
group_modify(~ get_path_segments(.x, clusters = POIs_05_50[[i]])) %>%
st_sf() %>%
mutate(individual.local.identifier = names(clustered_sfs_05_50)[i])
print(paste("All paths segmented for ", names(FFT_segments_05_50)[i]))
}
names(FFT_segments_05_50) <- names(clustered_sfs_05_50)
save(FFT_segments_05_50, file = "../Results/FFT_segments_05_50.Rdata")
names(FFT_segments_05_50)
load("../Results/FFT_segments_05_50.Rdata")
for(i in seq_along(FFT_segments_05_50)) {
pdf(paste("../DOCS/POI Maps/Buff30_thresh-05_minpt-50/segments_by_day/", names(FFT_segments_05_50)[i], ".pdf", sep = ""), width = 11, height = 8)
for(Day in unique(FFT_segments_05_50[[i]]$day)){
dayplot <- ggplot() +
geom_sf(data = POIs_05_50[[i]]) +
geom_sf_text(data = POIs_05_50[[i]], aes(label = Cluster)) +
geom_sf(data = filter(clustered_sfs_05_50[[i]], day == Day), color = "black", size = 2) +
geom_sf(data = filter(FFT_segments_05_50[[i]], day == Day), aes(color = factor(values)), size = 1) +
theme_classic() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, size = 36)) +
labs(title = paste(names(FFT_segments_05_50)[i], " - Day ", Day, sep = ""))
print(dayplot)
}
dev.off()
print(paste("Complete Dayplot visualization for ", names(FFT_segments_05_50)[i], sep = ""))
}
knitr::opts_chunk$set(echo = TRUE)
t <- 10:10
max <- 1
scale <- 1
yadj <- 0 #shifts logistic function along the x axis
mass <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
plot(x = t, y = mass)
mass
t
t <- c(10:10)
t
exp(0)
t <- -10:10
max <- 1
scale <- 0
yadj <- 0 #shifts logistic function along the x axis
mass <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
plot(x = t, y = mass)
t
mass
t <- -10:10
max <- 1
scale <- 0
yadj <- 0.5 #shifts logistic function along the x axis
mass <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
plot(x = t, y = mass)
t <- -10:10
max <- 1
scale <- 0.2
yadj <- 0.5 #shifts logistic function along the x axis
mass <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
plot(x = t, y = mass)
t <- -10:10
max <- 1
scale <- 1
yadj <- 0.5 #shifts logistic function along the x axis
mass <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
plot(x = t, y = mass)
t <- -10:10
max <- 1
scale <- 1
yadj <- 0.5 #shifts logistic function along the x axis
#this modification to the logistic function maximizes growth at mass = 0
mass1 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
plot(x = t, y = mass, type = "l")
?segments
?lines
{
plot(x = t, y = mass, type = "l")
abline(h = 0, lty = "dashed")
#segments(x0 = )
}
t <- -10:10
max <- 1
scale <- 1
yadj <- 0.5 #shifts logistic function along the x axis
#this modification to the logistic function maximizes growth at mass = 0, t = 0
mass1 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
{
plot(x = t, y = mass, type = "l")
abline(h = 0, lty = "dashed")
y <- 1 #starting value
ti <- log(-(yadj * (max + y))/((yadj - 1) * max + (yadj * y)))/scale #gets current location on growth curve (solved from modified logistic growth equation below)
segments(x0 = ti, y0 = y, x1 = ti + 1, y1 = y, col = "green")
segments(x0 = ti + 1, y0 = y, x1 = ti + 1, y1 = (max/yadj) * (1/(1+exp(-scale*(ti))) -yadj), col = "green")
}
t <- -10:10
max <- 1
scale <- 1
yadj <- 0.5 #shifts logistic function along the x axis
#this modification to the logistic function maximizes growth at mass = 0, t = 0
mass1 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
{
plot(x = t, y = mass, type = "l")
abline(h = 0, lty = "dashed")
y <- 1 #starting value
ti <- log(-(yadj * (max + y))/((yadj - 1) * max + (yadj * y)))/scale #gets current location on growth curve (solved from modified logistic growth equation below)
segments(x0 = ti, y0 = y, x1 = ti + 1, y1 = y, col = "green")
#segments(x0 = ti + 1, y0 = y, x1 = ti + 1, y1 = (max/yadj) * (1/(1+exp(-scale*(ti))) -yadj), col = "green")
}
?segments
ti
y <- 1 #starting value
ti <- log(-(yadj * (max + y))/((yadj - 1) * max + (yadj * y)))/scale #gets current location on growth curve (solved from modified logistic growth equation below)
ti
{
plot(x = t, y = mass, type = "l")
abline(h = 0, lty = "dashed")
#segments(x0 = ti, y0 = y, x1 = (ti + 1), y1 = y, col = "green")
#segments(x0 = ti + 1, y0 = y, x1 = ti + 1, y1 = (max/yadj) * (1/(1+exp(-scale*(ti))) -yadj), col = "green")
}
t <- -10:10
max <- 2
scale <- 1
yadj <- 0.5 #shifts logistic function along the x axis
#this modification to the logistic function maximizes growth at mass = 0, t = 0
mass1 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
y <- 1 #starting value
ti <- log(-(yadj * (max + y))/((yadj - 1) * max + (yadj * y)))/scale #gets current location on growth curve (solved from modified logistic growth equation below)
{
plot(x = t, y = mass, type = "l")
abline(h = 0, lty = "dashed")
segments(x0 = ti, y0 = y, x1 = (ti + 1), y1 = y, col = "green")
segments(x0 = ti + 1, y0 = y, x1 = ti + 1, y1 = (max/yadj) * (1/(1+exp(-scale*(ti))) -yadj), col = "green")
}
t <- -10:10
max <- 2
scale <- 1
yadj <- 0.5 #shifts logistic function along the x axis
#this modification to the logistic function maximizes growth at mass = 0, t = 0
mass1 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
y <- 1 #starting value
ti <- log(-(yadj * (max + y))/((yadj - 1) * max + (yadj * y)))/scale #gets current location on growth curve (solved from modified logistic growth equation below)
{
plot(x = t, y = mass1, type = "l")
abline(h = 0, lty = "dashed")
segments(x0 = ti, y0 = y, x1 = (ti + 1), y1 = y, col = "green")
segments(x0 = ti + 1, y0 = y, x1 = ti + 1, y1 = (max/yadj) * (1/(1+exp(-scale*(ti))) -yadj), col = "green")
}
(max/yadj) * (1/(1+exp(-scale*(ti))) -yadj)
t <- -10:10
max <- 2
scale <- 1
yadj <- 0.5 #shifts logistic function along the x axis
#this modification to the logistic function maximizes growth at mass = 0, t = 0
mass1 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
y <- 1 #starting value
ti <- log(-(yadj * (max + y))/((yadj - 1) * max + (yadj * y)))/scale #gets current location on growth curve (solved from modified logistic growth equation below)
{
plot(x = t, y = mass1, type = "l")
abline(h = 0, lty = "dashed")
segments(x0 = ti, y0 = y, x1 = (ti + 1), y1 = y, col = "green")
segments(x0 = ti + 1, y0 = y, x1 = ti + 1, y1 = (max/yadj) * (1/(1+exp(-scale*(ti))) -yadj), col = "green")
}
t <- -10:10
max <- 2
scale <- 1
yadj <- 0.5 #shifts logistic function along the x axis
#this modification to the logistic function maximizes growth at mass = 0, t = 0
mass1 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
y <- 1 #starting value
ti <- log(-(yadj * (max + y))/((yadj - 1) * max + (yadj * y)))/scale #gets current location on growth curve (solved from modified logistic growth equation below)
{
plot(x = t, y = mass1, type = "l")
abline(h = 0, lty = "dashed")
segments(x0 = ti, y0 = y, x1 = (ti + 1), y1 = y, col = "green")
segments(x0 = ti + 1, y0 = y, x1 = ti + 1, y1 = (max/yadj) * (1/(1+exp(-scale*(ti + 1))) -yadj), col = "green")
}
scale <- 2
mass2 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
max <- 4
mass3 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
scale <- 0.5
mass4 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
{
plot(x = mass3, y = t, type = "l", col = "red")
lines(x = mass2, y = t, col = "blue")
lines(x = mass4, y = t, col = "purple")
}
scale <- 2
mass2 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
max <- 4
mass3 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
scale <- 0.5
mass4 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
{
plot(x = t, y = mass3, type = "l", col = "red")
lines(x = t, y = mass2, col = "blue")
lines(x = t, y = mass3, col = "purple")
}
scale <- 2
mass2 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
max <- 4
mass3 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
scale <- 0.5
mass4 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
{
plot(x = t, y = mass3, type = "l", col = "red")
lines(x = t, y = mass2, col = "blue")
lines(x = t, y = mass4, col = "purple")
}
scale <- 2
max = 2
mass2 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
max <- 4
mass3 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
scale <- 0.5
mass4 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
{
plot(x = t, y = mass3, type = "l", col = "red")
lines(x = t, y = mass2, col = "blue")
lines(x = t, y = mass4, col = "purple")
}
install.packages(c("bayesplot", "bit", "brew", "brms", "Brobdingnag", "bslib", "callr", "classInt", "cli", "colourpicker", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbscan", "desc", "devtools", "digest", "distributional", "dplyr", "DT", "e1071", "evaluate", "fontawesome", "future", "geosphere", "gert", "ggforce", "ggridges", "gh", "gitcreds", "globals", "gtable", "HDInterval", "hms", "httpuv", "igraph", "isoband", "jsonlite", "knitr", "lme4", "lubridate", "maptools", "markdown", "minqa", "move", "openssl", "pbapply", "pkgload", "plyr", "polyclip", "posterior", "processx", "ps", "purrr", "ragg", "RcppEigen", "readr", "rgdal", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "rversions", "s2", "sf", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "spData", "stplanr", "stringr", "sys", "testthat", "tidyr", "tidyselect", "tinytex", "V8", "vctrs", "vroom", "wk", "xfun", "xts", "yaml", "zip", "zoo"))
install.packages(c("bayesplot", "bit", "brew", "brms", "Brobdingnag", "bslib", "callr", "classInt", "cli", "colourpicker", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbscan", "desc", "devtools", "digest", "distributional", "dplyr", "DT", "e1071", "evaluate", "fontawesome", "future", "geosphere", "gert", "ggforce", "ggridges", "gh", "gitcreds", "globals", "gtable", "HDInterval", "hms", "httpuv", "igraph", "isoband", "jsonlite", "knitr", "lme4", "lubridate", "maptools", "markdown", "minqa", "move", "openssl", "pbapply", "pkgload", "plyr", "polyclip", "posterior", "processx", "ps", "purrr", "ragg", "RcppEigen", "readr", "rgdal", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "rversions", "s2", "sf", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "spData", "stplanr", "stringr", "sys", "testthat", "tidyr", "tidyselect", "tinytex", "V8", "vctrs", "vroom", "wk", "xfun", "xts", "yaml", "zip", "zoo"))
install.packages(c("bayesplot", "bit", "brew", "brms", "Brobdingnag", "bslib", "callr", "classInt", "cli", "colourpicker", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbscan", "desc", "devtools", "digest", "distributional", "dplyr", "DT", "e1071", "evaluate", "fontawesome", "future", "geosphere", "gert", "ggforce", "ggridges", "gh", "gitcreds", "globals", "gtable", "HDInterval", "hms", "httpuv", "igraph", "isoband", "jsonlite", "knitr", "lme4", "lubridate", "maptools", "markdown", "minqa", "move", "openssl", "pbapply", "pkgload", "plyr", "polyclip", "posterior", "processx", "ps", "purrr", "ragg", "RcppEigen", "readr", "rgdal", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "rversions", "s2", "sf", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "spData", "stplanr", "stringr", "sys", "testthat", "tidyr", "tidyselect", "tinytex", "V8", "vctrs", "vroom", "wk", "xfun", "xts", "yaml", "zip", "zoo"))
install.packages(c("bayesplot", "bit", "brew", "brms", "Brobdingnag", "bslib", "callr", "classInt", "cli", "colourpicker", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbscan", "desc", "devtools", "digest", "distributional", "dplyr", "DT", "e1071", "evaluate", "fontawesome", "future", "geosphere", "gert", "ggforce", "ggridges", "gh", "gitcreds", "globals", "gtable", "HDInterval", "hms", "httpuv", "igraph", "isoband", "jsonlite", "knitr", "lme4", "lubridate", "maptools", "markdown", "minqa", "move", "openssl", "pbapply", "pkgload", "plyr", "polyclip", "posterior", "processx", "ps", "purrr", "ragg", "RcppEigen", "readr", "rgdal", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "rversions", "s2", "sf", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "spData", "stplanr", "stringr", "sys", "testthat", "tidyr", "tidyselect", "tinytex", "V8", "vctrs", "vroom", "wk", "xfun", "xts", "yaml", "zip", "zoo"))
library(devtools)
install_github("https://github.com/aqvining/AQVtoolbox")
#library(devtools) #for installing personal packages
#install_github("https://github.com/aqvining/Foraging-Simulator")
library(ForageR)
library(AQVtoolbox) #installed locally. Also available at "https://github.com/aqvining/AQVtoolbox"
library(tidyverse)
library(gridExtra)
library(ggpubr)
source("../CODE/Simulations/extract_path_data.R")
t <- -10:10
max <- 2
scale <- 1
yadj <- 0.5 #shifts logistic function along the x axis
#this modification to the logistic function maximizes growth at mass = 0, t = 0
mass1 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
y <- 1 #starting value
ti <- log(-(yadj * (max + y))/((yadj - 1) * max + (yadj * y)))/scale #gets current location on growth curve (solved from modified logistic growth equation below)
{
plot(x = t, y = mass1, type = "l")
abline(h = 0, lty = "dashed")
segments(x0 = ti, y0 = y, x1 = (ti + 1), y1 = y, col = "green")
segments(x0 = ti + 1, y0 = y, x1 = ti + 1, y1 = (max/yadj) * (1/(1+exp(-scale*(ti + 1))) -yadj), col = "green")
}
scale <- 2
max = 2
mass2 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
max <- 4
mass3 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
scale <- 0.5
mass4 <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj)
{
plot(x = t, y = mass3, type = "l", col = "red")
lines(x = t, y = mass2, col = "blue")
lines(x = t, y = mass4, col = "purple")
}
values <- 0:10 #consider the case where there are 11 patches, with values that range from 0 to 10
#We can plot the resulting attractions of each patch under varying levels of Choice Determinism,
#encoded as phi
attractions <- ForageR:::scale_attraction(values, 0)
plot(x = values, y = attractions)
for (i in 1:21) { #we will demonstrate 21 different values of phi
phi <- seq(-1, 1, by = 0.1)[i]
attractions <- ForageR:::scale_attraction(values, phi)
lines(x = values, y = attractions, col = grDevices::heat.colors(21)[i], lty = "dashed")
}
determinisms <- seq(-1,1,by = 0.1)
regens <- seq(0.01, 0.2, by = 0.01) #can't start at 0, because undefined for scale parameter of logistic function
load("../Results/sims_prelim/route_detections_sims2.Rdata") #raw simulation data, saved in object all_simulations
all_paths <- read_csv("../Results/sims_prelim/route_sims2_all_paths.csv")
ID_metadata <- read_csv("../Results/sims_prelim/route_sims2_ID_metadata.csv")
#add step length and turn angle to all movement data
all_paths <- all_paths %>% get_step_metrics_multiple(step_number = "Step") #function from AQVtoolkit
#summarize step lengths and turning angles by individual
outcomes_by_ID <- all_paths %>% summarize(step_length_mean = mean(Step_length, na.rm = TRUE),
step_length_sd = sd(Step_length, na.rm = TRUE),
step_turn_mean = mean(Step_turn, na.rm = TRUE),
step_turn_sd = sd(Step_turn, na.rm = TRUE))
#add patch visit summaries to outcomes df. Columns addedd to outcomes dataframe at the total number of targetted patches that were reached, the standard deviation in the proportion of visits that were to a given patch, the total energy the forager extracted, and the regeneration rates of patches in the foragers environment. Applied functions contained in extract_path_data.R
patch_vists <- outcomes_by_ID$ID %>% lapply(get_patch_visit_counts, all_simulations = all_simulations, ID_metadata = ID_metadata) #create a list containing, in each element, a vector of total patch visits for a given forager ID. get_patch_visit_counts is sourced by extract_path_data.R in setup
outcomes_by_ID <- outcomes_by_ID %>%
#for each ID, get the table with counts for each possible patchs and sum. Function in extract_path_data.R
mutate(total_patch_visits = sapply(patch_vists, sum),
patch_visit_proportion_sd = sapply(patch_vists, function(X) sd(X/sum(X))), #standard deviation on patch counts for each ID, normalized by total patch visits (sd on proportion of visits)
energy_extracted = sapply(ID,
function(X) {
all_simulations[[get_E_F_numbers(X)[1]]]$foragers[[get_E_F_numbers(X)[2]]]$energy
}), # for each ID, extract the energy field from the relevant forager in all_simulations. function in extract_path_data.R
regen = sapply(ID, function(X) all_simulations[[get_E_F_numbers(X)[1]]]$patches$REGEN %>% mean()),              #for each forager ID, get the mean regen rate of patches in environment
)
summary_data_full <- merge(ID_metadata, outcomes_by_ID, by = "ID")
head(summary_data_full)
ggplot(summary_data_full) + geom_jitter(aes(x = regen, y = patch_visit_proportion_sd, color = Choice_Determinism))
ggplot(summary_data_full) + geom_jitter(aes(x = regen, y = patch_visit_proportion_sd, color = Choice_Determinism)) + theme_classic()
high_regen_IDs <- summary_data_full %>% filter(regen > 0.07) %>% .$ID %>% sample(size = 2)
for(i in seq_along(high_regen_IDs)){
print(all_simulations[[get_E_F_numbers(high_regen_IDs[i])[1]]]$plotPaths()) #gets the environment number of each ID, finds that environment in the simulation data, and plots movement. Expecting agents to stay at a single patch
}
middle_regen_high_determinism <- summary_data_full %>% filter(regen == 0.05, Choice_Determinism > 0.2) %>% .$ID %>% sample(size = 2)
for(i in seq_along(middle_regen_high_determinism)){
print(all_simulations[[get_E_F_numbers(middle_regen_high_determinism[i])[1]]]$plotPaths()) #Expecting agents to move between two patches
}
middle_regen_low_determinism <- summary_data_full %>% filter(regen == 0.05, Choice_Determinism < -0.2) %>% .$ID %>% sample(size = 2)
for(i in seq_along(middle_regen_low_determinism)){
print(all_simulations[[get_E_F_numbers(middle_regen_low_determinism[i])[1]]]$plotPaths()) #Expecting agents to move between all patches
}
low_regen_high_determinism <- summary_data_full %>% filter(regen == 0.01, Choice_Determinism > 0.2) %>% .$ID %>% sample(size = 2)
for(i in seq_along(low_regen_high_determinism)){
print(all_simulations[[get_E_F_numbers(low_regen_high_determinism[i])[1]]]$plotPaths()) #expecting agents to move more often between nearby patches, but to utilize all options.
}
patches <- list(st_point(c(0,10)), st_point(c(0,-10))) %>% st_sfc() %>%   #create two points vertically seperated by a distance of 20 units
st_buffer(dist = 2) %>%                                          #transform generated points into circles with given patch radius
data.frame(geom = .,
NAME = as.character(1:length(.)),
MAX_VALUE = 10,
VALUE = 9,
REGEN = 0.02) %>% #use patch parameters determined in previous simulations
st_sf()                                 #store patch circles into a spatial features data frame with metadata
field <- st_point(c(0,0)) %>% st_buffer(dist = 20) %>% st_sfc() #create wide bounds
#forager with high phi
forager1 <- createForagers(1, #number of foragers
type = "BRW", #ForageR class that includes persistence and directedness
concentrations = 1, #set to max to for clarity of demonstration
bounds = field,
speeds = 1,
sights = 60, #large enough to included the entire field
giving_up_density = 0.3, #chosen in previous simulations to generate balanced foraging and traveling times
quiet = TRUE,        #prevents warnings set up to notify users of parameters that are being set to defaults
choice_determinism = 1, #irrelevent with only two patches
efficiency = 0.1, #chosen in previous simulations to generate balanced foraging and traveling times
persistences = 0.9) #demo with high persistence (commuter)
environment1 <- Environment(foragers = forager1, patches = patches, bounds = field)
for(i in 1:1000){
environment1$progress() #simulate 1000 steps
}
environment1$plotPaths()
#forager with low phi
forager2 <- createForagers(1, #number of foragers
type = "BRW", #ForageR class that includes persistence and directedness
concentrations = 1, #set to max to for clarity of demonstration
bounds = field,
speeds = 1,
sights = 60, #large enough to included the entire field
giving_up_density = 0.3, #chosen in previous simulations to generate balanced foraging and traveling times
quiet = TRUE,        #prevents warnings set up to notify users of parameters that are being set to defaults
choice_determinism = 1, #irrelevent with only two patches
efficiency = 0.1, #chosen in previous simulations to generate balanced foraging and traveling times
persistences = 0.1) #demo with low persistence (route user)
environment2 <- Environment(foragers = forager2, patches = patches, bounds = field)
for(i in 1:1000){
environment2$progress() #simulate 1000 steps
}
environment2$plotPaths()
simulation_metadata <- read.csv("../Results/sims_main/DPC_simulation_metadata.csv")
#Prediction 1: Route-Based Commutes (Static-Taxis)
simulation_metadata %>% filter(Choice_Determinism > 0.7, Directedness > 0.9, Persistence < 0.2)
#Simulation 5903, 6851, 7498: closely clustered patches
#Simulation 5728
#Prediction 2: Variable Commutes, Low Directedness (Static-Taxis + Exploration)
simulation_metadata %>% filter(Choice_Determinism > 0.9, Directedness < 0.6, Directedness > 0.4, Persistence > 0.4, Persistence < 0.6, Num_patches == 4)
#Simulation 6810
#Prediction 3: Route-Commute Development (Static-Taxis + Exploration + RL)
#Simulate forager with high directedness in Environment 6810
#Prediction 4: Directed Movement (Dynamic-Taxis)
simulation_metadata %>% filter(Choice_Determinism < -0.5, Directedness > 0.9, Persistence < 0.1, Num_patches == 4)
#simulation 5225
#Prediction 5: Route-Commute Development (Dynamic-Taxis + RL)
#See Prediction 3
#Prediction 6: Variable Commutes, High Directedness
simulation_metadata %>% filter(Choice_Determinism < -0.2, Directedness > 0.9, Persistence > 0.7, Persistence < 0.8, Num_patches == 4)
#Simulation 5479: patches are lined up, bad example
#Simulation 7229
#Prediction 7
#No Useful Simulations
environment_numbers <- c(5728, 6810, 6810, 5225, 6810, 7229)
selected_sims <- vector("list", length = length(environment_numbers))
for(i in seq_along(environment_numbers)) {
file_ID <- environment_numbers[i] - (environment_numbers[i] %% 100) + 1 #files start every 100 simulations (eg 1, 101, 201, etc)
filename <- paste("../Results/sims_main/all_simulations/route_detections_sims3_", file_ID, ".Rdata", sep = "")
load(filename)
simulation <- simulations[[environment_numbers[i] %% 100]]
selected_sims[[i]] <- simulation
}
for(i in seq_along(selected_sims)){
print(selected_sims[[i]]$plotPaths())
}
selected_sims[[3]]$foragers[[1]]$concentration <- 0.8
selected_sims[[3]]$foragers[[1]]$persistence <- 0.2
selected_sims[[3]]$foragers[[1]]$path <- st_cast(selected_sims[[3]]$foragers[[1]]$location, "LINESTRING")
for(x in 1:1000) {
selected_sims[[3]]$progress()
}
selected_sims[[3]]
#' @title Logistic Growth
#' @description A function to determine a patches location on its logistic growth curve (solved from VALUE), then increase VALUE by one unit of time on the curve
#
#' @param y a vector of numerics representing current values experiencing logistic growth
#' @param max the horizontal asymptote of the growth function
#' @param scale the maximum growth rate
#' @param yadj scales the sigmoid midpoint on y axis, relative to max. At 0.5, maximum growth occurs at time 0
logistic_growth <- function(y, max = 1, scale = 0.2, yadj = 0.5) {
#output: a vector of numerics of equal length to input
#description: returns values in the x variable as a function of logistic growth, using remaining input parameters
#Notes: This is probably a more complicated growth curve than necessary
zeros <- which(max == 0) #zeros need to be removed from a vector of values being updated, as a zero max is undefined for this function
max <- max[-zeros]
t <- log(-(yadj * (max + y))/((yadj - 1) * max + (yadj * y)))/scale #gets current location on growth curve (solved from modified logistic growth equation below)
t <- t + 1
y <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj) #reconverts from t to y
#reinsert zeros for final output
for(i in seq_along(zeros))
max <- append(max, 0, after=zeros[i])
return(y)
}
logistic_growth(y = c(2,2,2,2), scale = c(1,1,1,1), max = 1)
logistic_growth(y = c(2,2,2,2), scale = c(1,1,1,1), max = 2)
#' @title Logistic Growth
#' @description A function to determine a patches location on its logistic growth curve (solved from VALUE), then increase VALUE by one unit of time on the curve
#
#' @param y a vector of numerics representing current values experiencing logistic growth
#' @param max the horizontal asymptote of the growth function
#' @param scale the maximum growth rate
#' @param yadj scales the sigmoid midpoint on y axis, relative to max. At 0.5, maximum growth occurs at time 0
logistic_growth <- function(y, max = 1, scale = 0.2, yadj = 0.5) {
#output: a vector of numerics of equal length to input
#description: returns values in the x variable as a function of logistic growth, using remaining input parameters
#Notes: This is probably a more complicated growth curve than necessary
zeros <- which(max == 0) #zeros need to be removed from a vector of values being updated, as a zero max is undefined for this function
max <- max[-zeros]
t <- log(-(yadj * (max + y))/((yadj - 1) * max + (yadj * y)))/scale #gets current location on growth curve (solved from modified logistic growth equation below)
t <- t + 1
y <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj) #reconverts from t to y
#reinsert zeros for final output
if(length(zeros) > 0){
for(i in seq_along(zeros))
max <- append(max, 0, after=zeros[i])
}
return(y)
}
logistic_growth(y = c(2,2,2,2), scale = c(1,1,1,1), max = 2)
logistic_growth(y = c(2,2,2,2), scale = c(1,1,1,1), max = c(2,2,2,2,))
logistic_growth(y = c(2,2,2,2), scale = c(1,1,1,1), max = c(2,2,2,2))
max <- c(2,2,2,2)
which(max == 0)
zeros <- which(max == 0)
zeros
max[-zeros]
#' @title Logistic Growth
#' @description A function to determine a patches location on its logistic growth curve (solved from VALUE), then increase VALUE by one unit of time on the curve
#
#' @param y a vector of numerics representing current values experiencing logistic growth
#' @param max the horizontal asymptote of the growth function
#' @param scale the maximum growth rate
#' @param yadj scales the sigmoid midpoint on y axis, relative to max. At 0.5, maximum growth occurs at time 0
logistic_growth <- function(y, max = 1, scale = 0.2, yadj = 0.5) {
#output: a vector of numerics of equal length to input
#description: returns values in the x variable as a function of logistic growth, using remaining input parameters
#Notes: This is probably a more complicated growth curve than necessary
if(sum(max == 0) > 0){
zeros <- which(max == 0) #zeros need to be removed from a vector of values being updated, as a zero max is undefined for this function
max <- max[-zeros]
}
t <- log(-(yadj * (max + y))/((yadj - 1) * max + (yadj * y)))/scale #gets current location on growth curve (solved from modified logistic growth equation below)
t <- t + 1
y <- (max/yadj) * (1/(1+exp(-scale*(t))) -yadj) #reconverts from t to y
#reinsert zeros for final output
if(length(zeros) > 0){
for(i in seq_along(zeros))
max <- append(max, 0, after=zeros[i])
}
return(y)
}
logistic_growth(y = c(2,2,2,2), scale = c(1,1,1,1), max = c(2,2,2,2))
logistic_growth(y = c(2,2,2,2), scale = c(1,1,1,1), max = 4
)
logistic_growth(y = c(0,2,2,2,0,2,0), scale = c(1,1,1,1), max = c(0,4,4,4,0,4,0))
cd("C:\\Users\\avining\\Documents\\Foraging Simulator")
setwd("C:\\Users\\avining\\Documents\\Foraging Simulator")
build()
install()
detach(forageR)
